{"version":3,"sources":["components/Overlay.js","components/Behaviours.js","components/FilterButton.js","components/CombatBoard.js","App.js","serviceWorker.js","index.js"],"names":["Overlay","props","state","classes","this","overlayToggled","className","onClick","overlayText","React","Component","Behaviours","items","EnemyData","behaviourData","BehaviourData","overlayActionIndex","closeBehaviourTooltip","bind","roll","filters","selectedEnemies","enemies","filter","enemy","includes","name","behaviourIndex","map","index","key","move","wound_value","size","behaviourTable","behaviour","actionIndex","behaviourInfo","find","item","setState","simple_description","enemyIndex","behaviours","enemyStates","stateIndex","rollColumn","Object","keys","enemyStatus","statusIndex","action","e","toggleBehaviourTooltip","getBehaviourFromRoll","FilterButton","toggled","classNames","push","value","join","handleClick","enemyName","CombatBoard","floatDie","window","scrollY","floatd20","onClickEnemySelect","enemyData","selectAllEnemies","addEventListener","removeEventListener","arrayOfEnemies","rand","Math","floor","random","currentSelection","newSelectedEnemies","indexOf","splice","i","classFloat","filterList","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9629deba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Overlay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let classes = 'overlay'\r\n    \r\n    if (this.props.overlayToggled) {\r\n      classes = 'overlay opened'\r\n    }\r\n    else {\r\n      classes = 'overlay'\r\n    }\r\n\r\n    return (\r\n      <div className={classes} onClick={this.props.onClick}>\r\n        <span>{this.props.overlayText}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Overlay","import React, {Component} from 'react'\r\nimport EnemyData from '../data/enemies.json'\r\nimport BehaviourData from '../data/enemy-actions.json'\r\nimport Overlay from './Overlay'\r\n\r\nexport default class Behaviours extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      items: EnemyData,\r\n      behaviourData: BehaviourData,\r\n      overlayToggled: false,\r\n      overlayText: '',\r\n      overlayActionIndex: ''\r\n    }\r\n\r\n    this.closeBehaviourTooltip = this.closeBehaviourTooltip.bind(this)\r\n  }\r\n\r\n  rollColumn() {\r\n    return <div className=\"roll-number-list\">\r\n      <div className=\"roll-value\">1-3</div>\r\n      <div className=\"roll-value\">4-6</div>\r\n      <div className=\"roll-value\">7-9</div>\r\n      <div className=\"roll-value\">10-12</div>\r\n      <div className=\"roll-value\">13-15</div>\r\n      <div className=\"roll-value\">16-19</div>\r\n      <div className=\"roll-value\">20</div>\r\n    </div>\r\n  }\r\n\r\n  getBehaviourFromRoll(roll) {\r\n    let filters = this.props.selectedEnemies\r\n    let enemies = this.state.items.filter(function(enemy) {\r\n      return filters.includes(enemy.name)\r\n    })\r\n\r\n    let behaviourIndex = 0\r\n\r\n    switch(roll) {\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n        behaviourIndex = 1\r\n        break\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n        behaviourIndex = 2\r\n        break\r\n      case 7:\r\n      case 8:\r\n      case 9:\r\n        behaviourIndex = 3\r\n        break\r\n      case 10:\r\n      case 11:\r\n      case 12:\r\n        behaviourIndex = 4\r\n        break\r\n      case 13:\r\n      case 14:\r\n      case 15:\r\n        behaviourIndex = 5\r\n        break\r\n      case 16:\r\n      case 17:\r\n      case 18:\r\n      case 19:\r\n        behaviourIndex = 6\r\n        break\r\n      case 20:\r\n        behaviourIndex = 7\r\n        break\r\n      default:\r\n        behaviourIndex = 1\r\n    }\r\n\r\n    return (\r\n      enemies.map((enemy, index) => (\r\n        <div className=\"roll-result-actions box\" key={`${enemy}${index}`}>\r\n          <h3>{enemy.name}</h3>\r\n          <div className=\"enemy-info\">\r\n            <span>Move: {enemy.move}</span>\r\n            <span>Wound: {enemy.wound_value}</span>\r\n            <span>Size: {enemy.size}</span>\r\n          </div>\r\n          <div className=\"behaviour-tables\">\r\n            {this.behaviourTable(enemy, index, roll, behaviourIndex)}\r\n          </div>\r\n        </div>\r\n      ))\r\n    )\r\n  }\r\n\r\n  toggleBehaviourTooltip(behaviour, enemy, actionIndex) {\r\n    let data = this.state.behaviourData\r\n    let behaviourInfo = data.find(item => item.name === behaviour)\r\n\r\n    if (actionIndex === this.state.overlayActionIndex) {\r\n      this.setState(state => ({\r\n        overlayToggled: false,\r\n        overlayActionIndex: '',\r\n        overlayText: ''\r\n      }))\r\n    }\r\n    else if (this.state.overlayText === behaviourInfo.simple_description) {\r\n      this.setState(state => ({\r\n        overlayActionIndex: actionIndex\r\n      }))\r\n    }\r\n    else {\r\n      this.setState(state => ({\r\n        overlayToggled: true,\r\n        overlayText: behaviourInfo.simple_description,\r\n        overlayActionIndex: actionIndex\r\n      }))\r\n    }\r\n  }\r\n\r\n  closeBehaviourTooltip() {\r\n    this.setState({\r\n      overlayToggled: false,\r\n      overlayText: '',\r\n      overlayActionIndex: ''\r\n    })\r\n  }\r\n\r\n  behaviourTable(enemy, enemyIndex, roll, behaviourIndex) {\r\n    return (\r\n      <div key={`${enemy.name}${enemyIndex}`} className=\"enemy-behaviour-table\">\r\n        {\r\n          enemy.behaviours.map((enemyStates, stateIndex) => (\r\n            <div className=\"enemy-table\" key={`${stateIndex}`}>\r\n              <div className=\"roll-number-section\">\r\n                <div className=\"column-title\"><h4>Roll</h4></div>\r\n                {this.rollColumn()}\r\n              </div>\r\n              <div className=\"status-section\">\r\n                {Object.keys(enemyStates).map((enemyStatus, statusIndex) => (\r\n                  <div className=\"status-column\" key={`${statusIndex}`}>\r\n                    <div className=\"column-title\"><h4>{enemyStatus}</h4></div>\r\n                    {Object.keys(enemy.behaviours[stateIndex][enemyStatus]).map((action, actionIndex) => (\r\n                      <div className={(behaviourIndex === actionIndex + 1) ? 'roll-action highlighted' : 'roll-action'} key={`${enemy.name}${enemyStatus}${actionIndex}`}>\r\n                        <span onClick={(e) => this.toggleBehaviourTooltip(enemy.behaviours[stateIndex][enemyStatus][action], enemy, enemy.name + enemyStatus + actionIndex)}>{enemy.behaviours[stateIndex][enemyStatus][action]}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Overlay overlayToggled={this.state.overlayToggled} overlayText={this.state.overlayText} onClick={this.closeBehaviourTooltip}/>\r\n        <div className=\"behaviour-results\">\r\n          {this.getBehaviourFromRoll(this.props.roll)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\n\r\nclass FilterButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      toggled: true\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.onClick(this.props, this.state)\r\n\r\n    this.setState(state => ({\r\n      toggled: !state.toggled,\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    const classNames = ['btn']\r\n\r\n    if (this.state.toggled === true) {\r\n      classNames.push('selected')\r\n    }\r\n\r\n    return (\r\n      <button key={this.props.value} className={classNames.join(' ')} onClick={this.handleClick.bind(this)} value={this.props.enemyName}>\r\n        {this.props.enemyName}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FilterButton\r\n","import React, {Component} from 'react'\r\nimport Behaviours from './Behaviours'\r\nimport FilterButton from './FilterButton'\r\nimport EnemyData from '../data/enemies.json'\r\n\r\nexport default class CombatBoard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.onClickEnemySelect = this.onClickEnemySelect.bind(this)\r\n    this.enemyData = EnemyData\r\n    this.state = { \r\n      roll: 1,\r\n      selectedEnemies: [],\r\n      floatd20: false\r\n    }\r\n    this.selectAllEnemies = this.selectAllEnemies.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.selectAllEnemies()\r\n    window.addEventListener('scroll', this.floatDie)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    window.removeEventListener('scroll', this.floatDie)\r\n  }\r\n\r\n  floatDie = () => {\r\n    if (window.scrollY > 300) {\r\n      this.setState({ floatd20: true })\r\n    }\r\n    else {\r\n      this.setState({ floatd20: false })\r\n    }\r\n  }\r\n\r\n  selectAllEnemies() {\r\n    let arrayOfEnemies = []\r\n    \r\n    EnemyData.map((enemy) => (\r\n      arrayOfEnemies.push(enemy.name)\r\n    ))\r\n\r\n    this.setState({selectedEnemies: arrayOfEnemies})\r\n  }\r\n\r\n  handleClick() {\r\n    const rand = Math.floor(Math.random() * 20 + 1)\r\n    this.setState({ roll: rand })\r\n  }\r\n\r\n  onClickEnemySelect (props, state) {\r\n    const currentSelection = this.state.selectedEnemies\r\n    let newSelectedEnemies = currentSelection\r\n\r\n    if (!state.toggled) {\r\n      newSelectedEnemies = [...currentSelection, props.enemyName]\r\n    } else {\r\n      let index = newSelectedEnemies.indexOf(props.enemyName)\r\n      newSelectedEnemies.splice(index, 1)\r\n    }\r\n\r\n    this.setState(({\r\n      selectedEnemies: newSelectedEnemies\r\n    }))\r\n  }\r\n  \r\n  filterList() {\r\n    let enemies = this.enemyData\r\n\r\n    return(\r\n      enemies.map((enemy, i) => (\r\n        <FilterButton\r\n        key={i}\r\n        onClick={this.onClickEnemySelect.bind()}\r\n        enemyName={enemy.name}/>\r\n      ))\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const classFloat = this.state.floatd20 ? 'float' : '';\r\n    return (\r\n      <div className=\"combat-board\">\r\n        <h3>Click to roll the Blackstone die</h3>\r\n        <div className=\"d20-wrapper\">\r\n          <button className={`d20 hex ${classFloat}`} onClick={this.handleClick.bind(this)}><span>{this.state.roll}</span></button>\r\n        </div>\r\n        <div className=\"filter-list\">\r\n          {this.filterList()}\r\n        </div>\r\n        <Behaviours roll={this.state.roll} selectedEnemies={this.state.selectedEnemies} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport CombatBoard from './components/CombatBoard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Blackstone Fortress Companion</h1>\n        <span className=\"slogan\">Unofficial App in the 41st Millenium</span>\n        <span className=\"version-number tiny\">v0.2.1</span>\n      </header>\n      <div className=\"app-body\">\n        <CombatBoard />\n      </div>\n      <footer className=\"footer tiny\">\n        <div className=\"footer-content\">\n          <p>This is a purely unofficial fan-made helper app to accompany Warhammer Quest: Blackstone Fortress board game sessions.</p>\n          <p>Made by: <a href=\"https://github.com/dire\">dire</a></p>\n          <p>© Copyright Games Workshop Limited 2019. GW, Games Workshop, Citadel, White Dwarf, Space Marine, 40K, Warhammer, Warhammer 40,000, the ‘Aquila’ Double-headed Eagle logo, Warhammer Age of Sigmar, Battletome, Stormcast Eternals, and all associated logos, illustrations, images, names, creatures, races, vehicles, locations, weapons, characters, and the distinctive likenesses thereof, are either ® or ™, and/or © Games Workshop Limited, variably registered around the world. All Rights Reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}